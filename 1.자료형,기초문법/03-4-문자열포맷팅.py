"""
블로그 포스팅 (포맷팅방식) : https://bodhi-sattva.tistory.com/67
블로그 포스팅 (형식지정자) : https://bodhi-sattva.tistory.com/68
세세하게 정리하느라 주제에따라 글을 두개로 나눠서 보기 편하게 했습니다.
"""

# -*- coding: utf-8 -*-
# 정리하는데 2일 잡아먹었다... 생고생 제대로 하니까 허탈하다.
formating = '포맷팅'
print("%% operator %s" % formating)		        # 포맷팅 방법 1 (%% operator)
print("str.format {f}".format(f=formating))     # 포맷팅 방법 2 (str.format)
print(f"f-string {formating}")			        # 포맷팅 방법 3 (f-string)
"""문자열 포맷팅:
문자열내에서 값을 삽입하는 것을 포맷팅이라고 한다.
c언어 를 보자면, printf()함수에서 형식문자(%~)로 문자열에 없는 값을 삽입할 수 있듯이 파이썬에서도 문자열에 다른 값을 삽입할 수 있다.
(물론 +(문자열 결합)을 사용해서 간단한 건 쉽게 할 수 있지만, 반복되고 복잡한 결합등에는 포맷팅이 유리하다)
이 포맷팅에도 버전에 따른 방식의 종류가 있다. 
3.0 이전 방식의 % operator, 3.0 이후 방식의 str.format, 3.6 이상 방식의 f-string 이다.
차례대로 써먹어보자
(참고로 % 방식에서는 %를 출력할때 %%로 써줘야되고, {} 방식에서는 출력할때 {를 {{, }를 }}로 써줘야 겹치지 않고 출력된다.)
"""

test1 = '\n%s 버전' % '% operator'
print(test1)
time = '%s %d. %d. %d.' % ('현재시간 :', 2020, 1, 26)
print(time)
'''% operator:
오래된 포맷팅 방식으로 C언어 의 printf()함수에서 쓴 방식과 비슷한데, 앞쪽 문자열에 %~로 데이터 타입에 맞는 형식문자를 써주고,
문자열 뒤에 % 를 붙인 후, 형식문자에 들어갈 값이나 변수를 달아주는 방식이다. 
타입에 맞게 형식문자를 쓰지않으면 에러나고, 문자열이 길어지면 가독성이 떨어지는 단점이 있다.
ex>  print("나는 %s이고, %d살 이며, %s에서 산다. 내 꿈은 %s이며, %d까지 %s하는 것이 목표다. % (name, age, location, dream, time, todo)
'''

test2 = '\n{} 버전'.format('str.format')
print(test2)
print('나는 {1}, {0}'.format('아무생각이 없기 때문이다.', '아무생각이 없다.'))
test3 = '이름, {name}: {age}, {location}출신'
print(test3.format(name='누구누구', age='18살', location='대전'))

dic = {'name': '아몰랑', 'age': '17살', 'location': '세종'}
print(test3.format(**dic))
'''str.format:
3.0부터의 새로운 포맷팅 방식으로, 예전 보단 이 포맷팅 방식을 공식문서에서도 권장한다. 
.format() 함수를 문자열 뒤에 붙여 포맷팅 해주는 방식으로, 앞의 문자열에는 {}로 문자열이 들어갈 공간을 만든다.

들어갈 값이 여러개면 0, 1, 2와 같이 format()함수에 들어가는 매개변수의 순서대로 인덱스 번호를 {}안에 사용해 값을 넣을 수도 있고, 
값에대한 키 값을 딕셔너리 구조처럼(나중에 배운다) 짝을 맞추어 키값을 {}안에 사용해 값을 넣을 수도 있다.
그리고 따로 format()함수에 들어갈 키와 값의 쌍들을 딕셔너리 자료형 변수로 만든다음 인자로 넣어줘도 된다. 대신 인자앞에 **를 붙여야 된다.

예전 방식보다 보기 좋아졌어도 이역시 길어지면 가독성이 떨어진다. 그러나 새로운 방식이 등장했으니...
'''

new = 'f-string'
print(f"\n{new} 버전")
zom = '좀'
test4 = f'제발 {zom} 코딩 할때 {zom} 이상한 에러뜨지마라 {zom}'
print(test4)
num = 1
print(f"이것도 된다. {num}, {num + num}, {num + 2}")
li1 = ['나는', '너는']
dic2 = {"me": '행복하다.', 'you': '행복하니?'}
print(f"{li1[0]} {dic2['me']} {li1[1]} {dic2['you']}")
'''f-string:
3.6이상 버전에서 사용할 수 있는 포맷팅 방식, 문자열의 {}안에 대입할 변수를 넣어주면 된다. .format() 함수도 필요없다. 대신 문자열 맨 앞에 f를 붙여줘야 된다.
이방식으로 숫자 자료형 변수의 산술연산 출력도 가능하다. 변수이름을 {}안에 적어주면 되는데, 물론 리스트나 딕셔너리도 들어갈 수 있다.

방식의 순서를 따지면, f-string > % operator > str.format 순으로 빠르다. 
참고로 이게 다가 아니라, 포맷팅될때 표현되는 방식을 세세하게 지정해 줄수 있는데...
'''

print("{0:ㅡ^+10,}".format(999.999))
"""형식 지정자:
문자열 내에 값을 삽입(포맷팅)할 때, 세부적으로 붙여줄 설정을 형식 지정자로 해줄 수 있다.
%을 사용한 예전 포맷팅 방법에는 %(타입)뒤에 %형식지정자(타입), {}를 사용하는 요즘 포맷팅 방법에는 {(값)}에서 {(값): 형식지정자}로 하면 된다.
형식 지정자로 적용시킬 수있는 설정을 모두 쓰면 아래와 같다.
<<채움문자> 정렬방법> <부호표시법> <전체폭설정> <단위구분법> <소수점이하자릿수> <타입형식>
"""

print("정렬기본값 : [{0:10}]\n왼  쪽정렬 : [{0:<10}]\n가운데정렬 : [{0:^10}]\n오른쪽정렬 : [{0:>10}]".format('ppap'))
print("정렬기본값 : [{0:10}]\n왼  쪽정렬 : [{0:<10}]\n가운데정렬 : [{0:^10}]\n오른쪽정렬 : [{0:>10}]".format(1234))
print("채움문자(숫자) : [{0:0^10}]\n채움문자(문자) : [{0:빔^10}]\n채움문자(특수기호) : [{0:_^10}]\n채움문자(특수기호) : [{0:□^10}]".format(2020))
'''정렬방법, 전체폭설정, 채움문자:
정렬하는 방법에는 왼쪽(<), 가운데(^), 오른쪽(>) 정렬이 있다. (기본값: 문자는 왼쪽 정렬(<), 숫자는 오른쪽 정렬(>))
물론 원래는 공백이 생기지 않는데, 여기서는 추가로 전체 폭설정을(10) 추가해서 정렬될 때 공백이 보이게 했다.

전체 폭설정은 원하는 폭만큼의 숫자를 넣어주면 원래 값의 크기가 뭐든간에 폭만큼(남는 크기는 공백으로) 값이 저장된다. 
채움문자는 정렬방법 앞에 원하는 문자나 숫자를 추가한다면 공백을 채우는 문자를 설정해줄 수 있다. (정렬방법 명시 없이도(기본값으로 정렬) 사용가능)
'''

print("부호표시기본값: {0:}, {1:}\n모든부호표시: {0:+}, {1:+}\n-부호만표시: {0:-}, {1:-}\n부호맨앞위치: {0:=+5}, {1:=5}".format(3, -3))
'''부호표시법:
부호를 표시하는 방법에는 모든부호표시(+), 음수부호만표시(-), 부호 맨앞 고정표시(=)가 있다. (기본값: 음수부호만표시(-))
부호를 맨앞에 고정 표시하면서 모든부호를 표시하려면 =+ 순서로 써야한다. (+=로 쓰면 +을 공백 채움문자로 인식)
당연하겠지만 문자에 부호표시법을 쓰면 에러가 난다.
'''

print("기본값: {0:}\n,붙임: {0:,}\n_붙임: {0:_}".format(-1980000))
'''단위구분법:
단위구분법에는 천단위(000)마다, 콤마 붙이기(,), 밑줄 붙이기(_)가 있다. (기본값 : 안붙임)
주위에서 화폐 액수나 그외 자릿수가 많아지는 숫자들을 보기좋게 출력시킬수 있다.
'''

print("기본값(10자리수): {0:}\n5자리수전까지: {0:.5}\n1자리수전까지: {0:.1}\n20자리수전까지: {0:.20}".format(3.1415926535))
'''소수점이하자릿수:
소수점이하자릿수는 .(자릿수) 처럼 작성하면 쓴 자릿수부터 뒤까지를 짜른다. (기본값: 값 그대로, 짜르는 자릿수 없음) 
당연히 자릿수에는 자연수만 들어갈 수 있다. (0도 들어가긴 하는데 1과 출력값이 같다)
자릿수에서 원래의 소수점 아래 자릿수보다 더 큰 값을 작성하면 원래값 뒤에 0이 나오고, 더 간다면 이상한 값이 나오는걸 볼 수 있는데...
파이썬의 실수의 범위를 벗어나서 오차범위로 나오는 값들이다. 웬만하면 거기까진 가진 말자.
'''

print("기본값: {0:}\n2진수: {0:b}\n10진수: {0:d}\n16진수소문자: {0:x}\n16진수대문자: {0:X}".format(63))
'''타입형식:
타입형식은 문자열이면 s, 정수면 b, d, o, x, X, n, 실수면 e, E, f, F, g, G, n 과 같이 있는데
이것으로 2진법(b), 10진법(d), 16진법의 소문자와 대문자(x, X)를 출력할 수 있다.
'''
