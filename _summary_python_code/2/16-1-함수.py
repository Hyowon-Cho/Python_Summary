# 함수(명명규칙, 소문자+언더스코어(언더바))
def func():
    print("함수 입니다")


print("함수를 호출 할께요.")
func()
print("함수가 종료됬습니다.")
"""함수(function):
특정 역할을 수행하는 코드를 함수 하나로 묶은 것으로, 한 번 만들어 놓으면, 필요할 때 언제든지 불러 쓸 수 있으며, 
파이썬에서 사용했던 input(), print()함수와 여러 내장함수들도 파이썬에서 미리 만들어놓은 함수중 하나임.

함수로써 코드의 용도를 구분할 수 있고, 반복되는 코드를 하나의 함수로 줄일 수 있으며, 실수도 줄일 수 있음.

함수를 만드는 형식은 
def 함수이름():
    코드
    
와 같음. (def는 define(디파인, 정의하다)의 축약어인 키워드 임)
(함수이름을 정하는 규칙은, 기본적으로 소문자와 언더바를 사용하며,(lower_case) 수업용으론 단어첫글자만 대문자, 나머진 소문자로 붙여서 사용한다.)
그리고 함수를 만든 뒤에, 함수를 어디서든지 호출해서 함수를 사용할 수 있음.

함수이름()
과 같이하면 (인자값이 필요할 경우, 괄호()안에 인자를 넣어주면 됨.) 함수를 호출(call)할 수 있음.
(함수를 만드는 코드 앞에 함수를 호출하는 코드가 있으면, 에러가 남. 변수도 정의한 후에 사용하듯이, 
함수도 정의한(만든) 후에만 사용할 수 있음.

참고로 함수에서 함수를 부를 수도 있고, 함수에서 자기자신(함수)를 부를 수도 있음(이는 재귀함수로, 자세한 것은 3폴더-1참고,)
함수에서 다른 함수를 부르게 되는 경우, 스텍 구조로 호출이 됨.
ex) 스크립트에서 함수1을 호출하고 함수1에서 함수2를 호출하면,
스크립트에서 함수1을 호출전 까지 코드
스크립트에서 함수1 호출 ->
    함수1에서 함수2 호출전 까지 코드
    함수1에서 함수2 호출 ->
        함수 2에서의 코드
        함수 2종료 <-
    함수1에서 함수2를 호출한 후 코드
    함수1종료 <-
스크립트에서 함수1을 호출한 후 코드

와 같이 스텍처럼 가장 마지막에 호출한 함수부터 처리함. (후입선출)


참고로 빈함수는,
def 함수이름():
    pass
와 같은 형식으로 만들 수 있음.
(pass 키워드를 활용)
"""
